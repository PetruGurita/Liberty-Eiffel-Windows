-- To launch the compilation with this file, just type:
--
--               compile example2.ace
--
-- This second example contains more constructs and options available to ACE
-- files.
--
-- In this example, classes are compiled with different levels of assertions
-- checking.  Most "pure" Eiffel project should be handled this way.
--
-- Also note that the -verbose option flag is compatible with the ACE file
-- mode, hence the following command is also allowed:
--
--               compile -verbose example2.ace
--
system
      -- The name for the executable
   "pyramid"

root
      -- To indicate that the execution will start in procedure `make' of class
      -- PYRAMID
   PYRAMID: make

default
   assertion (loop)
      -- To select the default assertion level to be verified
      -- Try to change this "loop" keyword for example.

   collect (yes)
      -- To include or to exclude the Garbage Collector
      -- Yes or No is a valid answer here.

cluster

   demos_cluster: "${path_tutorial}"
         -- The description of the first cluster starts with its name just
         -- followed by the path of the directory
         -- The ${path_tutorial} variable is set in the configuration file
         -- (liberty.se)
      end

   standard : "${path_liberty_core}/string"
         -- The string cluster
      default
          assertion (require)
      option
          assertion (ensure): STRING
             -- To override the previously defined level for some classes of
             -- this cluster
      end

   basic_io : "${path_liberty_core}/io/basic"
         -- The basic io cluster
      default
          assertion (ensure)
      option
          assertion (require): STD_INPUT
             -- To override the previously defined level for some classes of
             -- this cluster
      end

   standard: "${path_liberty_core}/loadpath.se"
         -- Liberty Eiffel's standard library. Always put this last so that you
         -- can override options for parts of the library.
      default
          assertion (ensure)
      end

end
